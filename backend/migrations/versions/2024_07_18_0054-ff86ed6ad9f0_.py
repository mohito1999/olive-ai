"""empty message

Revision ID: ff86ed6ad9f0
Revises: 34dfab535ccf
Create Date: 2024-07-18 00:54:32.105436

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ff86ed6ad9f0'
down_revision: Union[str, None] = '34dfab535ccf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.String(), server_default=sa.text("id_generator('user')"), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('mobile_number', sa.String(), nullable=True),
    sa.Column('auth_provider', sa.String(), nullable=False),
    sa.Column('auth_provider_id', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('organization_id', sa.String(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # Dummy lines to make schema upgrade work locally
    op.execute('CREATE SCHEMA IF NOT EXISTS auth')
    op.execute('CREATE TABLE IF NOT EXISTS auth.users (id UUID PRIMARY KEY, email TEXT UNIQUE, mobile_number TEXT UNIQUE, password TEXT, role TEXT, created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP)')

    # ### end Alembic commands ###
    with open('migrations/functions/supabase_user_sync.sql', 'r') as fd:
        statements = fd.read()
        for statement in statements.split("--bun:split"):
            op.execute(statement)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.execute('DROP FUNCTION IF EXISTS public.handle_new_user')
    op.execute('DROP TRIGGER IF EXISTS on_auth_user_created on auth.users')

    # ### end Alembic commands ###
