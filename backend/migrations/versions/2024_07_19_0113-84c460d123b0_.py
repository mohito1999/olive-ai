"""empty message

Revision ID: 84c460d123b0
Revises: 6e2fdb99b04d
Create Date: 2024-07-19 01:13:58.038666

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '84c460d123b0'
down_revision: Union[str, None] = '6e2fdb99b04d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organization',
    sa.Column('id', sa.String(), server_default=sa.text("id_generator('organization')"), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('credits', sa.Integer(), nullable=False),
    sa.Column('telephony_service_id', sa.String(), nullable=False),
    sa.Column('telephony_service_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('transcriber_id', sa.String(), nullable=False),
    sa.Column('transcriber_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('agent_id', sa.String(), nullable=False),
    sa.Column('agent_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('synthesizer_id', sa.String(), nullable=False),
    sa.Column('synthesizer_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('current_timestamp_utc()'), nullable=True),
    sa.Column('created_by', sa.String(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('current_timestamp_utc()'), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], ),
    sa.ForeignKeyConstraint(['synthesizer_id'], ['synthesizer.id'], ),
    sa.ForeignKeyConstraint(['telephony_service_id'], ['telephony_service.id'], ),
    sa.ForeignKeyConstraint(['transcriber_id'], ['transcriber.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute(
        """
        CREATE OR REPLACE TRIGGER set_timestamp_organization
        BEFORE UPDATE ON organization
        FOR EACH ROW
        EXECUTE FUNCTION trigger_set_timestamp_modify();
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP TRIGGER IF EXISTS set_timestamp_organization on organization')
    op.drop_table('organization')
    # ### end Alembic commands ###
